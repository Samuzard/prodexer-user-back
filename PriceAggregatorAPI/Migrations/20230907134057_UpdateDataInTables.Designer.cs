// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PricAggregatorAPI.Data;

#nullable disable

namespace PricAggregatorAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230907134057_UpdateDataInTables")]
    partial class UpdateDataInTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PricAggregatorAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MainProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceUnit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2177),
                            MainProductId = 1,
                            Price = 79.98m,
                            PriceUnit = "$",
                            StoreId = 1,
                            Url = "https://www.amazon.com/Nike-Blazer-Jumbo-DN2158-White/dp/B09Q91N4Q7"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2180),
                            MainProductId = 1,
                            Price = 180.00m,
                            PriceUnit = "$",
                            StoreId = 2,
                            Url = "https://www.stirlingsports.co.nz/new/blazer-low-77-jumbo-mens-dn2158-101"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2183),
                            MainProductId = 2,
                            Price = 100.00m,
                            PriceUnit = "$",
                            StoreId = 2,
                            Url = "https://www.stirlingsports.co.nz/mens/clothing/tees-and-singlets/IL5172/Adventure-Volcano-Long-Sleeve-Tee.html"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2184),
                            MainProductId = 2,
                            Price = 70.00m,
                            PriceUnit = "$",
                            StoreId = 1,
                            Url = "https://www.amazon.com/Volcano-Adventure-Climate-Premium-T-Shirt/dp/B0BH88FLPM?customId=B0753883B1&customizationToken=MC_Assembly_1%23B0753883B1&th=1"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2186),
                            MainProductId = 3,
                            Price = 879.00m,
                            PriceUnit = "$",
                            StoreId = 1,
                            Url = "https://www.amazon.com/GIGABYTE-G5-1920x1080-i5-12500H-KF-E3US333SH/dp/B0BVRGF3MR/ref=sr_1_8?keywords=gigabyte&qid=1694092757&s=pc&sprefix=gigabyte%2Caps%2C190&sr=1-8"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2188),
                            MainProductId = 3,
                            Price = 7287.15m,
                            PriceUnit = "$",
                            StoreId = 3,
                            Url = "https://www.bestbuy.ca/en-ca/product/custom-gigabyte-aorus-15-laptop-intel-i7-12700h-32gb-ram-4tb-pcie-ssd-nvidia-rtx-3070-ti-15-6-win-10-pro/15997948"
                        });
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MainCatrgoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainCatrgoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2107),
                            IsActive = true,
                            MainCatrgoryId = 1,
                            Name = "Shoes",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2109),
                            IsActive = true,
                            MainCatrgoryId = 1,
                            Name = "Shirts",
                            Sort = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2111),
                            IsActive = true,
                            MainCatrgoryId = 1,
                            Name = "Jackets",
                            Sort = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2113),
                            IsActive = true,
                            MainCatrgoryId = 2,
                            Name = "Gaming",
                            Sort = 1
                        });
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MainCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2092),
                            IsActive = true,
                            Name = "Clothes",
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2095),
                            IsActive = true,
                            Name = "Laptops",
                            Sort = 1
                        });
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.MainProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CatrgoryID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CatrgoryID");

                    b.ToTable("MainProduct");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CatrgoryID = 1,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2163),
                            Description = "They say, \"Don't fix what works.\" We say, \"Perfect it.\" The classic, streetwear superstar gets rethought with the Nike Blazer Low '77 Jumbo. Harnessing the old-school look you love, it now features an oversized Swoosh design and jumbo laces. Its plush foam tongue and thicker stitching embolden the iconic look that's been praised by the streets since '77.",
                            ImagePath = "https://m.media-amazon.com/images/I/71SncdCQuhL._AC_UX679_.jpg",
                            Name = "Nike Blazer Low '77 Jumbo"
                        },
                        new
                        {
                            Id = 2,
                            CatrgoryID = 2,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2165),
                            Description = "Layer this adidas originals Adventure Volcano Long Sleeve under a lightweight jacket, then head outside and let the cool air energise your day. Made from 100% cotton, this soft and comfortable tee is perfect for wandering. Whether you want to hit the trails up in the mountains, go fishing by the lake, or simply head to the market.",
                            ImagePath = "https://www.stirlingsports.co.nz/productimages/medium/1/104252_621324_95281.jpg",
                            Name = "Adventure Volcano Long Sleeve Tee"
                        },
                        new
                        {
                            Id = 3,
                            CatrgoryID = 4,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(2167),
                            Description = "World's leading brand of the best gaming laptops and creator laptops. Produce the thinnest, lightest, and high-performance laptops for gamers and creators.",
                            ImagePath = "https://static.gigabyte.com/StaticFile/Image/Global/22b8f47f1c21f48fa1a296eaa3565fed/Product/36557/webp/300",
                            Name = "GIGABYTE"
                        });
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconPath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Store");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(1972),
                            IconPath = "PlaceholderPath",
                            Name = "Amazon"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(1984),
                            IconPath = "PlaceholderPath",
                            Name = "Stirling Sports"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "admin",
                            CreationDate = new DateTime(2023, 9, 7, 14, 40, 56, 914, DateTimeKind.Local).AddTicks(1986),
                            IconPath = "PlaceholderPath",
                            Name = "BestBuy"
                        });
                });

            modelBuilder.Entity("PricAggregatorAPI.Models.Product", b =>
                {
                    b.HasOne("PriceAggregatorAPI.Models.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PriceAggregatorAPI.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProduct");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.Category", b =>
                {
                    b.HasOne("PriceAggregatorAPI.Models.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCatrgoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("PriceAggregatorAPI.Models.MainProduct", b =>
                {
                    b.HasOne("PriceAggregatorAPI.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CatrgoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
